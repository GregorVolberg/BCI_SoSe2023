y  = rnorm(50)
x1 = rnorm(50)
x2 = rnorm(50)
x3 = rnorm(50)
y  = rnorm(50)
x1 = rnorm(50)
x2 = rnorm(50)
x3 = rnorm(50)
vollesModell    = lm(y ~ x1 + x2 + x3)
eingeschrModell = lm(y ~ x2)
aov(vollesModell, eingeschrModell)
anova(vollesModell, eingeschrModell)
anova(eingeschrModell, vollesModell)
step(vollesModell, direction = 'backward')
stepmodel = step(vollesModell, direction = 'backward') # forward, backward, both
summary(stepmodel)
predict(vollesModell)
vollesModell$fitted.values
plot(vollesModell$residuals ~ vollesModell$fitted.values)
plot(vollesModell$residuals ~ vollesModell$fitted.values,
ylim = c(-3,3),
abline(h = 0, lty = 'dashed'))
plot(vollesModell$residuals ~ vollesModell$fitted.values,
xlab = 'Model prediction',
ylab = 'e',
ylim = c(-3,3),
abline(h = 0, lty = 'dashed'))
plot(vollesModell$residuals ~ vollesModell$fitted.values,
xlab = 'Model prediction',
ylab = 'e',
ylim = c(-3,3))
abline(h = 0, lty  = 'dashed')
df = c(y, x1, x2, x3)
apply(df, 2, scale)
df = data.frame(y, x1, x2, x3)
apply(df,2,scale)
apply(df[,2:4],2,scale)
betas = lm(y ~ scale(x1) + scale(x2) + scale(x3))$coefficients
betas
betas = lm(y ~ scale(x1) + scale(x2) + scale(x3))$coefficients[2:]
betas = lm(y ~ scale(x1) + scale(x2) + scale(x3))$coefficients[2:end]
betas = lm(y ~ scale(x1) + scale(x2) + scale(x3))$coefficients[2:4]
betas
corr(y,c(x1, x2, x3))
cor(y,c(x1, x2, x3))
help cor
cor(rep(y, 3),c(x1, x2, x3))
rep(y, 3)
rep(y, 1, 3)
y
cor(data.frame(y,y,y), data.frame(x1, x2, x3))
cor(data.frame(y), data.frame(x1, x2, x3))
betas = lm(y ~ scale(x1) + scale(x2) + scale(x3))$coefficients[2:4]
corrs = cor(data.frame(y), data.frame(x1, x2, x3))
betas
corrs
T1 = summary(lm(x1 + x2 + x3))
T1 = summary(lm(x1 ~ x2 + x3))
T1$r.squared
T1 = 1 - summary(lm(x1 ~ x2 + x3))$r.squared
T1
print(T1)
beta = lm(scale(sg) ~ scale(kg)) # z-standardisieren
print(beta)
plot(scale(sg)~scale(kg),
xlim=c(-1.5, 1.5),
ylim=c(-1.5, 1.5))
abline(v=0, lty='dashed')
abline(h=0, lty='dashed')
abline(c(0, beta), col = 'red')
plusminuskg = c(mean(kg)-1.5*sd(kg),
mean(kg)+1.5*sd(kg))
plusminussg = c(mean(sg)-1.5*sd(sg),
mean(sg)+1.5*sd(sg))
plot(sg ~ kg,
xlim=plusminuskg,
ylim=plusminussg)
abline(h=mean(sg), lty='dashed')
abline(v=mean(kg), lty='dashed')
abline(lm(sg~kg), col = 'red')
sg = c(38, 40, 39, 40, 41)
kg = c(153, 169, 172, 180, 183)
lm(sg ~ kg)
plot(sg ~ kg)
abline(lm(sg~kg), col='red')
lm.beta(sg~kg)
20.27*3000
p1 = 0.7
p2 = 0.3
c1 = p1/(1-p1)
c2 = p2/(1-p2)
or1 = c1/c2
or1
c1b = (1-p1)/p1
c2b = (1-p2)/p2
or2 = c1b/c2b
or2
1/or2
exp(-0.826)
1/exp(-0.826)
1/0.15
4.33*42
#####
# Daten (aus Backhaus et al., 2003, Kap. 5)
####
x1 <- c(1,2,4,5,2,3)
x2 <- c(1,6,5,6,3,4)
x3 <- c(2,3,4,6,3,4)
x4 <- c(1,3,4,2,5,6)
x5 <- c(2,4,5,3,7,7)
streichfette = data.frame(x1, x2, x3, x4, x5)
N <- nrow(streichfette) # Anzahl Reihen (Beobachtungen)
K <- ncol(streichfette) # Anzahl Spalten (Variablen)
R <- cor(streichfette)  # Korrelationsmatrix R fÃ¼r Streichfette
####
# Bartlett Test
####
Pruefgroesse <- -log(det(R))* (N-1-(2*K+5)/6) # nicht in Folien
df           <- K*(K-1)/2  # Freiheitsgrade
1 - pchisq(Pruefgroesse, df) # berechnet p
######
# KMO
######
p = matrix(numeric(K*N)/0, N) # Matrix mit Residuen, N rows by K columns
for (i in 1:K){
p[,i] = resid(lm(streichfette[,i]~., data=streichfette[,-i]))}
Q = cor(p)     # Matrix mit Partialkorrelationen, K*K
sum1 = sum(R^2)-K # subtrahiere Summe der Quadrate der diagonalen Elemente
sum2 = sum(Q^2)-K # subtrahiere Summe der Quadrate der diagonalen Elemente
KMO = sum1/(sum1+sum2) # KMO-Wert
# Korrelation und Winkel
deg2rad = function(deg){
rad = deg*pi/180
return(rad)
}
rad2deg = function(rad){
deg = 180/pi*rad
return(deg)
#####
# Daten (aus Backhaus et al., 2003, Kap. 5)
####
x1 <- c(1,2,4,5,2,3)
x2 <- c(1,6,5,6,3,4)
x3 <- c(2,3,4,6,3,4)
x4 <- c(1,3,4,2,5,6)
x5 <- c(2,4,5,3,7,7)
streichfette = data.frame(x1, x2, x3, x4, x5)
N <- nrow(streichfette) # Anzahl Reihen (Beobachtungen)
K <- ncol(streichfette) # Anzahl Spalten (Variablen)
R <- cor(streichfette)  # Korrelationsmatrix R fÃ¼r Streichfette
####
# Bartlett Test
####
Pruefgroesse <- -log(det(R))* (N-1-(2*K+5)/6) # nicht in Folien
df           <- K*(K-1)/2  # Freiheitsgrade
1 - pchisq(Pruefgroesse, df) # berechnet p
######
# KMO
######
p = matrix(numeric(K*N)/0, N) # Matrix mit Residuen, N rows by K columns
for (i in 1:K){
p[,i] = resid(lm(streichfette[,i]~., data=streichfette[,-i]))}
Q = cor(p)     # Matrix mit Partialkorrelationen, K*K
sum1 = sum(R^2)-K # subtrahiere Summe der Quadrate der diagonalen Elemente
sum2 = sum(Q^2)-K # subtrahiere Summe der Quadrate der diagonalen Elemente
KMO = sum1/(sum1+sum2) # KMO-Wert
# Korrelation und Winkel
deg2rad = function(deg){
rad = deg*pi/180
return(rad)
}
rad2deg = function(rad){
deg = 180/pi*rad
return(deg)
}
deg2rad(60)
cos(deg2rad(60))
cos(deg2rad(80))
cos(deg2rad(90))
cos(deg2rad(0))
acos(0.2)
rad2deg(acos(0.2))
0.94331^2 + 0.28039^2
0.98357^2 + 0.03229^2
0.720^2 + 0.122^2
0.711^2 + 0.164^2
0.7114^2 + 0.164^2
0.7114^2 + 0.16444^2
0.690^2 + 0.192^2
0.711^2 + 0.164^2
0.7114444^2 + 0.164^2
0.337^2 + 0.692^2
0.500^2 + 0.552^2
0.5004444^2 + 0.552^2
500+100+200+300+400+500+600+600
setwd('C:\Users\LocalAdmin\Documents\Git\BCI_neurofeedback')
setwd('C:/Users/LocalAdmin/Documents/Git/BCI_neurofeedback')
library(tidyverse)
library(lubridate) # for time / date data type; package is part of tidyverse
library(R.matlab)  # for reading Matlab's *.mat-files into R; you might need to install that package
fileListBehavioral <- c("AL1_BCIcar.mat", "AW7_BCIcar.mat", "DS3_BCIcar.mat", "JG1_BCIcar.mat")
# define function for reading in single subject data
get_rawDataBehavioral <- function(fileName){
tmp             <- readMat(fileName)$BCIcar
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 568 # pixels between obstacle and car at trial start
yResolution     <- tmp[[5]][2]
hz              <- tmp[[4]][1]
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
#outcome = V4,
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[[3]][1],
date    = as_datetime(tmp[[2]][1])) %>%
select(vp, trial, speed, ttc, obstacle, outcome, experiment, date)
}
tib <- map_df(fileList, get_rawDataBehavioral) # tibble with all participants
tib <- map_df(fileListBehavioral, get_rawDataBehavioral) # tibble with all participants
getwd
getwd()
setwd(./raw'')
setwd('./raw')
tib <- map_df(fileListBehavioral, get_rawDataBehavioral) # tibble with all participants
tib
tst <- get_rawDataBehavioral(fileList[1])
tst <- get_rawDataBehavioral(fileListBehavioral[1])
tst
unique(tib$tcc)
unique(tib$ttc)
sort(unique(tib$ttc))
library(tabyl)
library(janotor)
library(janitor)
install.packages("janitor")
behavRes <-  tib %>%
group_by(vp, ttc) %>%
summarize(n= n())
behavRes
behavRes <-  tib %>%
group_by(vp, ttc) %>%
summarize(by = outcome, n= n())
behavRes
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n_pass = sum(outcome == 'pass'),
n_fail = sum(outcome == 'fail'))
allVp <- map_df(fileListBehavioral, get_rawDataBehavioral)
# cumulative probability for success at low to high ttc
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n_pass = sum(outcome == 'pass'),
n_fail = sum(outcome == 'fail'))
behavRes
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass'),
n_fail  = sum(outcome == 'fail'),
cumprop = cumsum(n_pass) / sum(n))
behavRes
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n            = n(),
n_pass       = sum(outcome == 'pass'),
cumsum_pass  = cumsum(n_pass))
behavRes
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass'),
n_fail  = sum(outcome == 'fail')) %>%
ungroup()    %>%
group_by(vp) %>%
summarize(cumprop = cumsum(n_pass) / sum(n))
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass'),
n_fail  = sum(outcome == 'fail')) %>%
ungroup()    %>%
group_by(vp) %>%
summarize(cumsum_pass = cumsum(n_pass))
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass'),
n_fail  = sum(outcome == 'fail')) %>%
ungroup()
behavRes
behavRes %>%
group_by(vp) %>%
summarize(cumsum_pass = cumsum(n_pass))
behavRes %>%
group_by(vp) %>%
reframe(cumsum_pass = cumsum(n_pass))
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass'),
n_fail  = sum(outcome == 'fail')) %>%
ungroup()
behavRes
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass'),
n_fail  = sum(outcome == 'fail')) %>%
group_by(vp)
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass'),
n_fail  = sum(outcome == 'fail')) %>%
group_by(vp)  %>%
mutate(cumsum_pass = cumsum(n_pass))
behavRes
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass'),
n_fail  = sum(outcome == 'fail')) %>%
group_by(vp)  %>%
mutate(cumsum_pass  = cumsum(n_pass),
cumprop_pass = cumsum_pass / n())
summarize
behavRes
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass'),
n_fail  = sum(outcome == 'fail')) %>%
group_by(vp)  %>%
mutate(cumsum_pass  = cumsum(n_pass),
cumprop_pass = cumsum_pass / sum(n))
behavRes
behavRes <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass')) %>%
group_by(vp)  %>%
mutate(cumsum_pass  = cumsum(n_pass),
cumprop_pass = cumsum_pass / sum(n)) %>%
select(vp, ttc, n, n_pass, cumprop_pass)
behavioralResults <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass')) %>%
group_by(vp)  %>%
mutate(cumsum_pass  = cumsum(n_pass),
cumprop_pass = cumsum_pass / sum(n)) %>%
select(vp, ttc, n, n_pass, cumprop_pass)
behavResults <-  allVp %>%
group_by(vp, ttc) %>%
summarize(n       = n(),
n_pass  = sum(outcome == 'pass')) %>%
group_by(vp)  %>%
mutate(cumsum_pass  = cumsum(n_pass),
cumprop_pass = cumsum_pass / sum(n)) %>%
select(vp, ttc, n, n_pass, cumprop_pass)
behavResults$cumprop_pass
sd(behavResults$cumprop_pass)
?sd
?se
behavResults %>% group_by(ttc) %>%
summarize(m  = mean(cumprop_pass),
se = sd(cumprop_pass)/sqrt(n())
behavResults %>% group_by(ttc) %>%
summarize(m  = mean(cumprop_pass),
se = sd(cumprop_pass)/sqrt(n())) %>%
ungroup()
behavResults %>% group_by(ttc) %>%
summarize(m  = mean(cumprop_pass),
n  = n())
behavResults %>% group_by(ttc) %>%
summarize(m  = mean(cumprop_pass),
se = sd(cumprop_pass)/sqrt(n())) %>%
ungroup()
behavResults %>% group_by(ttc) %>%
summarize(m  = mean(cumprop_pass),
se = sd(cumprop_pass)/sqrt(n())) %>%
ungroup() %>%
plot(.$m ~ .$ttc)
grandMean = behavResults %>%
group_by(ttc) %>%
summarize(m  = mean(cumprop_pass),
se = sd(cumprop_pass)/sqrt(n())) %>%
ungroup()
# plot
plot(grandMean$m ~ grandMean$ttc)
plot(grandMean$m ~ grandMean$ttc, lwd=2, lty='solid', col= 'blue')
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', lty='solid', col= 'blue')
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), ylab = 'Cumulative propotion passed')
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), ylab = 'Cumulative p passed')
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), ylab = 'Cumulative p passed', xlab = 'time to collide')
plot(grandMean$m ~ grandMean$ttc/1000, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), ylab = 'Cumulative p passed', xlab = 'time to collision (ms)')
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), ylab = 'Cumulative p passed', xlab = 'time to collision (s)',
xaxt = F)
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), ylab = 'Cumulative p passed', xlab = 'time to collision (s)',
xaxt = 'n')
axis(1, at = seq(400, 200, 1600), labels = seq(0.4, 0.2, 1.6))
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), ylab = 'Cumulative p passed', xlab = 'time to collision (s)',
xaxt = 'n')
axis(1, at = seq(400, 1600, 200), labels = seq(0.4, 1.6, 0.2))
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), xlim = c(0, 1600), xaxt = 'n',
ylab = 'Cumulative p passed', xlab = 'Time to collision (s)')
axis(1, at = seq(400, 1600, 200), labels = seq(0.4, 1.6, 0.2))
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), xlim = c(400, 1600), xaxt = 'n',
ylab = 'Cumulative p passed', xlab = 'Time to collision (s)')
axis(1, at = seq(400, 1600, 200), labels = seq(0.4, 1.6, 0.2))
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), xlim = c(300, 1600), xaxt = 'n',
ylab = 'Cumulative p passed', xlab = 'Time to collision (s)')
axis(1, at = seq(400, 1600, 200), labels = seq(0.4, 1.6, 0.2))
flip_data(c(1, 2, 3))
fliplr
rev(c(1,2,3))
xpoly <- c(grandMean$ttc, rev(grandMean$ttc))
se <- grandMean$se
se[is.na(se)] = 0
ypoly <- c(grandMean$m + se, rev(grandMean$m) - se)
polygon(xpoly, ypoly)
plot(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue',
ylim = c(0,1), xlim = c(300, 1600), xaxt = 'n',
ylab = 'Cumulative p passed', xlab = 'Time to collision (s)')
axis(1, at = seq(400, 1600, 200), labels = seq(0.4, 1.6, 0.2))
xpoly <- c(grandMean$ttc, rev(grandMean$ttc))
se <- grandMean$se
se[is.na(se)] = 0
ypoly <- c(grandMean$m + se, rev(grandMean$m) - rev(se))
polygon(xpoly, ypoly)
plot(NULL,
ylim = c(0,1), xlim = c(300, 1600), xaxt = 'n',
ylab = 'Cumulative p passed', xlab = 'Time to collision (s)')
axis(1, at = seq(400, 1600, 200), labels = seq(0.4, 1.6, 0.2))
xpoly <- c(grandMean$ttc, rev(grandMean$ttc))
se <- grandMean$se
se[is.na(se)] = 0
ypoly <- c(grandMean$m + se, rev(grandMean$m) - rev(se))
polygon(xpoly, ypoly, col = 'lightblue')
lines(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue')
?polygon
plot(NULL,
ylim = c(0,1), xlim = c(300, 1600), xaxt = 'n',
ylab = 'Cumulative p passed', xlab = 'Time to collision (s)')
axis(1, at = seq(400, 1600, 200), labels = seq(0.4, 1.6, 0.2))
xpoly <- c(grandMean$ttc, rev(grandMean$ttc))
se <- grandMean$se
se[is.na(se)] = 0
ypoly <- c(grandMean$m + se, rev(grandMean$m) - rev(se))
polygon(xpoly, ypoly, col = 'lightblue', border = 'lightblue')
lines(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue')
legend(x=1.2, y=0.4, legend = c('behavioral'), col = 'blue', bty='n')
legend(x=1200, y=0.4, legend = c('behavioral'), col = 'blue', bty='n')
legend(x=1000, y=0.4, legend = c('behavioral'), lty = 'solid', col = 'blue', bty='n')
dev.off()
plot(NULL,
ylim = c(0,1), xlim = c(300, 1600), xaxt = 'n',
ylab = 'Cumulative p passed', xlab = 'Time to collision (s)')
axis(1, at = seq(400, 1600, 200), labels = seq(0.4, 1.6, 0.2))
xpoly <- c(grandMean$ttc, rev(grandMean$ttc))
se <- grandMean$se
se[is.na(se)] = 0
ypoly <- c(grandMean$m + se, rev(grandMean$m) - rev(se))
polygon(xpoly, ypoly, col = 'lightblue', border = 'lightblue')
lines(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue')
legend(x=1000, y=0.4, legend = c('behavioral'), lty = 'solid', lwd = 2, col = 'blue', bty='n')
legend(x=1000, y=0.4, legend = c('behavioral', 'BCI'), lty = 'solid', lwd = 2, col = c('blue', 'orange'), bty='n')
plot(NULL,
ylim = c(0,1), xlim = c(300, 1600), xaxt = 'n',
ylab = 'Cumulative p passed', xlab = 'Time to collision (s)')
axis(1, at = seq(400, 1600, 200), labels = seq(0.4, 1.6, 0.2))
xpoly <- c(grandMean$ttc, rev(grandMean$ttc))
se <- grandMean$se
se[is.na(se)] = 0
ypoly <- c(grandMean$m + se, rev(grandMean$m) - rev(se))
polygon(xpoly, ypoly, col = 'lightblue', border = 'lightblue')
lines(grandMean$m ~ grandMean$ttc, lwd=2, type = 'line', col= 'blue')
legend(x=1000, y=0.4, legend = c('behavioral', 'BCI-EEG'), lty = 'solid', lwd = 2, col = c('blue', 'orange'), bty='n')
behavResults %>% group_by(vp) %>%
summarize(q1 = quantile(cumprop_pass, 0.25))
behavResults %>% group_by(vp) %>%
summarize(q1 = quantile(cumprop_pass, 0.25),
q2 = quantile(cumprop_pass, 0.50),
q3 = quantile(cumprop_pass, 0.75))
nearest
behavResults
allVp %>%
filter(outcome == 'pass') %>%
group_by(vp) %>%
summarize(q1  = quantile(ttc, 0.25),
q2  = quantile(ttc, 0.50),
q3  = quantile(ttc, 0.75))
