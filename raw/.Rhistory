win = myLotto %in% lotto
}
myLotto <- c(41, 35, 16, 39,  2, 47)
win  <- 0
week <- 0
lottospiel <- function(){
myLotto <- c(41, 35, 16, 39,  2, 47)
win  <- 0
week <- 0
while (win == 0){
lotto <- sample(1:49,6,replace = TRUE)
week <- week+1 #SchleifenAusdruck startet
if (all(myLotto %in% lotto)){
win <- 1
}
}
cat('Won after ', week, 'weeks!\n')
}
lottospiel()
myLotto <- c(41, 35, 16, 39,  2, 47)
win  <- 0
week <- 0
lotto <- sample (1:49, 6, replace = FALSE)
intersect(myLotto, lotto)) == length(myLotto)
length(intersect(myLotto, lotto))
sample(1:10,8,TRUE)
setwd('C:/Users/Gregor/Documents/Git/BCI_neurofeedback/raw')
dir
dir()
library(tidyverse)
library(R.matlab)
install.packages("R.matlab")
library(tidyverse)
library(R.matlab)
fileList = c("AL1_BCIcar.mat", "AW7_BCIcar.mat", "DS3_BCIcar.mat", "JG1_BCIcar.mat")
readMat(fileList[1])
tmpData <- readMat(fileList[1])
tmpData$BCIcar
tmpData$BCIcar$outmat
tmpData$BCIcar
tmpData$BCIcar['resolution']
tmpData$BCIcar[[1]]
tmpData$BCIcar[[2]]
tmpData$BCIcar[[5]]
tmpData$BCIcar[[6]]
tmpData$BCIcar[[7]]
tmpData$BCIcar[[8]]
tmpData$BCIcar[['8'outmat]]
tmpData$BCIcar[['outmat']]
tmpData$BCIcar[[8]]
readMat(fileList[1])$BCIcar[[8]]
readMat(fileList[1])$BCIcar[[8]]
df <- NULL
vp       <- str_split_fixed(fileList, 1,3)
?str_split_i
vp       <- str_sub(fileList, 1,3)
vp
df <- NULL
for (vpnr in 1:numel(fileList)){
outmat <- readMat(fileList[vpnr])$BCIcar[[8]]
df <- rbind(df, outmat)
}
df <- NULL
for (vpnr in 1:length(fileList)){
outmat <- readMat(fileList[vpnr])$BCIcar[[8]]
df <- rbind(df, outmat)
}
outmat
df <- NULL
for (vpnr in 1:length(fileList)){
outmat <- as.tibble(readMat(fileList[vpnr])$BCIcar[[8]])
df <- rbind(df, outmat)
}
outmat <- as_tibble(readMat(fileList[vpnr])$BCIcar[[8]])
outmaz
outmat
outmat <- readMat(fileList[vpnr])$BCIcar[[8]] %>%
as_tibble() %>%
mutate(vp = str_sub(fileList[vpnr], 1, 3),
run = V1,
speed = V2,
vfield = V3,
corr   = V4)
outmat
outmat <- readMat(fileList[vpnr])$BCIcar[[8]] %>%
as_tibble() %>%
mutate(vp = str_sub(fileList[vpnr], 1, 3),
run = V1,
speed = V2,
vfield = as_factor(V3),
vfield = fct_recode(vfield,
left  = -1,
right = 1),
corr   = V4)
outmat <- readMat(fileList[vpnr])$BCIcar[[8]] %>%
as_tibble() %>%
mutate(vp = str_sub(fileList[vpnr], 1, 3),
run = V1,
speed = V2,
vfield = as_factor(V3),
vfield = fct_recode(vfield,
left  = "-1",
right = "1"),
outmat <- readMat(fileList[vpnr])$BCIcar[[8]] %>%
as_tibble() %>%
mutate(vp = str_sub(fileList[vpnr], 1, 3),
run = V1,
speed = V2,
vfield = as_factor(V3),
vfield = fct_recode(vfield,
left  = "-1",
right = "1"),
corr   = V4)
outma
outmat
fileList[vpnr])$BCIcar[[1]]
fileList[1])$BCIcar[[1]]
fileList[1]$BCIcar[[1]]
readMat(fileList[vpnr])$BCIcar[[8]]
readMat(fileList[vpnr])$BCIcar[[1]]
readMat(fileList[vpnr])$BCIcar[[2]]
readMat(fileList[vpnr])$BCIcar[[3]]
readMat(fileList[vpnr])$BCIcar[[4]]
readMat(fileList[vpnr])$BCIcar[[5]]
outmat <- readMat(fileList[vpnr])$BCIcar[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(str_sub(fileList[vpnr], 1, 3)),
trialNr = V1,
speed   = V2,
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
date    = fileList[vpnr])$BCIcar[[2]])
outmat <- readMat(fileList[vpnr])$BCIcar[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(str_sub(fileList[vpnr], 1, 3)),
trialNr = V1,
speed   = V2,
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
date    = readMat(fileList[vpnr])$BCIcar[[2]])
outmat
get_raw_data <- function(fileName){
tmp    <- readMat(fileName)$BCIcar
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = V2,
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
date    = tmp[[2]])
}
get_raw_data(fileList[1])
dat <- get_raw_data(fileList[1])
dat
get_raw_data <- function(fileName){
tmp    <- readMat(fileName)$BCIcar
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = V2,
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
date    = pull(tmp[[2]]))
}
dat <- get_raw_data(fileList[1])
dat
tmp[[2]]
tmp    <- readMat(fileNames[[1]])$BCIcar
tmp    <- readMat(fileList[[1]])$BCIcar
tmp
tmp[[2]]
tmp[[2]][1]
as_date()
library(lubridate) # for time / date data type; you might need to install that package
get_raw_data <- function(fileName){
tmp    <- readMat(fileName)$BCIcar
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = V2,
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
date    = lubridate(tmp[[2]][1]))
dat <- get_raw_data(fileList[1])
get_raw_data <- function(fileName){
tmp    <- readMat(fileName)$BCIcar
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = V2,
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
date    = lubridate(tmp[[2]][1]))
}
dat <- get_raw_data(fileList[1])
get_raw_data <- function(fileName){
tmp    <- readMat(fileName)$BCIcar
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = V2,
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
date    = as_date(tmp[[2]][1]))
}
dat <- get_raw_data(fileList[1])
dat
get_raw_data <- function(fileName){
tmp    <- readMat(fileName)$BCIcar
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = V2,
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
date    = as_datetime(tmp[[2]][1]))
}
dat <- get_raw_data(fileList[1])
dat
tmp
tmp[[3]]
tmp[[3]][1]
tmp[[6]][1]
7 * 1/60
1/60
7*1/60
768 / 165
165 / 768
7 * tmp[["hz"]]
7 * tmp["hz"]
tmp["hz"]
tmp[[1]]["hz"]
tmp[[1]]
tmp["hz"]
tmp[["hz"]]
tmp["hz"]
tmp
tmp[[2]]
tmp["hz"]
tmp["hz"][1]
str(tmp)
tmp[[4]]
tmp[[4]][1]
height_mm / (7 * tmp[[4]][1])
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
height_mm / (7 * tmp[[4]][1])
(7 * tmp[[4]][1])
(7 * tmp[[4]][1]) * (height_mm / tmp[[2]][2])
(7 * tmp[[4]][1]) * (height_mm / tmp[[2]][1])
tmp[[2]][1]
tmp
tmp[[6]][1]
tmp[[6]]
tmp[[7]]
tmp[[5]]
tmp[[5]][2]
get_rawDataBehavioral <- function(fileName){
tmp             <- readMat(fileName)$BCIcar
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
yResolution     <- tmp[[5]][2]
hz              <- tmp[[4]][1]
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = (V2 * hz) * (height_mm / yResolution),
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[[3]][1],
date    = as_datetime(tmp[[2]][1]))
}
dat <- get_rawDataBehavioral(fileList[1])
dat
collisionDist   <- 568
collisionDist / (7 * hz)
collisionDist / (7 * 60)
collisionDist / (7 * 60) * 1000
round(collisionDist / (7 * 60) * 1000)
get_rawDataBehavioral <- function(fileName){
tmp             <- readMat(fileName)$BCIcar
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 568 # pixels between obstacle and car at trial start
yResolution     <- tmp[[5]][2]
hz              <- tmp[[4]][1]
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[[3]][1],
date    = as_datetime(tmp[[2]][1]))
}
dat <- get_rawDataBehavioral(fileList[1])
dat
get_rawDataBehavioral <- function(fileName){
tmp             <- readMat(fileName)$BCIcar
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 568 # pixels between obstacle and car at trial start
yResolution     <- tmp[[5]][2]
hz              <- tmp[[4]][1]
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
#outcome = fct_recode(outcome,
#                      pass  = "1",
#                      fail  = "0"),
experiment = tmp[[3]][1],
date    = as_datetime(tmp[[2]][1]))
}
dat <- get_rawDataBehavioral(fileList[1])
dat
get_rawDataBehavioral <- function(fileName){
tmp             <- readMat(fileName)$BCIcar
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 568 # pixels between obstacle and car at trial start
yResolution     <- tmp[[5]][2]
hz              <- tmp[[4]][1]
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = V4,
#outcome = as_factor(V4),
#outcome = fct_recode(outcome,
#                      pass  = "1",
#                      fail  = "0"),
experiment = tmp[[3]][1],
date    = as_datetime(tmp[[2]][1]))
}
dat <- get_rawDataBehavioral(fileList[1])
dat
tmp[[8]]
dat
get_rawDataBehavioral <- function(fileName){
tmp             <- readMat(fileName)$BCIcar
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 568 # pixels between obstacle and car at trial start
yResolution     <- tmp[[5]][2]
hz              <- tmp[[4]][1]
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
#outcome = V4,
outcome = as_factor(V4),
#outcome = fct_recode(outcome,
#                      pass  = "1",
#                      fail  = "0"),
experiment = tmp[[3]][1],
date    = as_datetime(tmp[[2]][1]))
}
dat <- get_rawDataBehavioral(fileList[1])
dat
get_rawDataBehavioral <- function(fileName){
tmp             <- readMat(fileName)$BCIcar
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 568 # pixels between obstacle and car at trial start
yResolution     <- tmp[[5]][2]
hz              <- tmp[[4]][1]
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trialNr = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
#outcome = V4,
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[[3]][1],
date    = as_datetime(tmp[[2]][1]))
}
dat <- get_rawDataBehavioral(fileList[1])
dat
# define function for reading in single subject data
get_rawDataBehavioral <- function(fileName){
tmp             <- readMat(fileName)$BCIcar
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 568 # pixels between obstacle and car at trial start
yResolution     <- tmp[[5]][2]
hz              <- tmp[[4]][1]
outmat <- tmp[[8]] %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[[1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
#outcome = V4,
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[[3]][1],
date    = as_datetime(tmp[[2]][1])) %>%
select(vp, trial, speed, ttc, obstacle, outcome, experiment, date)
}
dat <- get_rawDataBehavioral(fileList[1])
dat
?map
map(fileList, get_rawDataBehavioral)
simplify(map(fileList, get_rawDataBehavioral))
map_df(fileList, get_rawDataBehavioral)
tst <- get_rawDataBehavioral(fileList[1])
tst
table(tst$ttc, tst$outcome)
?table
table(tst$ttc, tst$outcome)[,2] / table(tst$ttc, tst$outcome)[,1]
table(tst$ttc, tst$outcome)[,2] / sum(table(tst$ttc, tst$outcome))
table(tst$ttc, tst$outcome)[,2] / (table(tst$ttc, tst$outcome)[,1] + table(tst$ttc, tst$outcome)[,2])
table(tst$ttc, tst$outcome)
table(tst$ttc, tst$outcome)[,2] / (table(tst$ttc, tst$outcome)[,1] + table(tst$ttc, tst$outcome)[,2])
cumsum(table(tst$ttc, tst$outcome)[,2])
cumsum(table(tst$ttc, tst$outcome)[,2]) / sum(table(tst$ttc, tst$outcome))
plot(cumsum(table(tst$ttc, tst$outcome)[,2]) / sum(table(tst$ttc, tst$outcome)))
