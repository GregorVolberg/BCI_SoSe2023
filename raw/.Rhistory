KMO = sum1/(sum1+sum2) # KMO-Wert
KMO
KMO(R)
cortest.bartlett(dat, n = 5)
solution1 = principal(R, nfactors=5, rotate='none')
plot(solution1$values, type='b', ylab='Eigenwerte', xlab='Faktoren')
print(solution1$loadings, cut=0,digits=7, sort=T)
solution2 = principal(R, nfactors=2, rotate='varimax', scores=T)
print(solution2$loadings, cut=0,digits=7, sort=T)
factors = eigen(R)
factors
Z = scale(streichfette)
eigvalues = eigen(R)$values
plot(eigvalues, type='b') # nur 1 und 2 nach Scree Test
eig = eigvalues[1:2]
eigvector = eigen(R)$vectors[,1:2]
ladung = eigvector%*%diag(sqrt(eig))
diag(sqrt(eig))
eigvector
deg2rad = function(deg){
rad = deg*pi/180
return(rad)
}
rad2deg = function(rad){
deg = 180/pi*rad
return(deg)
}
cos(deg2rad(60))
rad2deg(acos(30))
rad2deg(acos(deg2rad(30)))
rad2deg(acos(0.2))
n = 72
n - (n/2)
deg2rad = function(deg){
rad = deg*pi/180
return(rad)
}
rad2deg = function(rad){
deg = 180/pi*rad
return(deg)
}
cos(deg2rad(45.2))
cos(deg2rad(55.2))
dat <- rbind(c(32, 64, 65, 67),
c(61, 37, 62, 65),
c(59, 40, 45, 43),
c(36, 62, 34, 35),
c(62, 46, 43, 40))
dat
corr(dat)
cor(dat)
500+400+900+100+1000+500
400+200+600+800+800+400
A=[1 3 5 7;2 4 4 8; 3 1 2 3; 4 3 2 1]
A=[1 3 5 7;2 4 4 8; 3 1 2 3; 4 3 2 1]
A = c(1 3 5 7;2 4 4 8; 3 1 2 3; 4 3 2 1)
A = matrix(c(1, 3, 5, 7,2, 4, 4, 8, 3, 1, 2, 3, 4, 3, 2, 1),4,4)
A
A = matrix(c(1, 3, 5, 7,2, 4, 4, 8, 3, 1, 2, 3, 4, 3, 2, 1),4,4, byrow=T)
A
eig(A)
eigen(A)
m=eigen(A)
m
400+800+1000+600+100+100+400
600+200+1000+1200+100+400
600+200+1000+1200+100+300
500+1000+100+1000+800+200
77(79)
77/79
2.235^5
2.235^4
note = readClipboard()
note
table(note)
400+3*800+100+200+300
install.packages(c("bit", "blob", "broom", "bslib", "cachem", "callr", "car", "cli", "colorspace", "cpp11", "crayon", "crul", "curl", "data.table", "DBI", "dbplyr", "DEoptim", "desc", "deSolve", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "farver", "fastmap", "forcats", "fs", "gamlss.dist", "gargle", "generics", "ggplot2", "googlesheets4", "gplots", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "knitr", "lifecycle", "lme4", "lubridate", "magrittr", "maptools", "MatrixModels", "minqa", "mnormt", "modelr", "NbClust", "openssl", "osfr", "pbapply", "pbkrtest", "pillar", "pkgload", "plyr", "processx", "ps", "purrr", "qap", "quantreg", "R.matlab", "R.methodsS3", "R.oo", "R.utils", "RColorBrewer", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "sass", "scales", "seriation", "sp", "stringi", "stringr", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "triebeard", "TSP", "tzdb", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "xfun", "yaml"))
install.packages(c("bit", "blob", "broom", "bslib", "cachem", "callr", "car", "cli", "colorspace", "cpp11", "crayon", "crul", "curl", "data.table", "DBI", "dbplyr", "DEoptim", "desc", "deSolve", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "farver", "fastmap", "forcats", "fs", "gamlss.dist", "gargle", "generics", "ggplot2", "googlesheets4", "gplots", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "knitr", "lifecycle", "lme4", "lubridate", "magrittr", "maptools", "MatrixModels", "minqa", "mnormt", "modelr", "NbClust", "openssl", "osfr", "pbapply", "pbkrtest", "pillar", "pkgload", "plyr", "processx", "ps", "purrr", "qap", "quantreg", "R.matlab", "R.methodsS3", "R.oo", "R.utils", "RColorBrewer", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "sass", "scales", "seriation", "sp", "stringi", "stringr", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "triebeard", "TSP", "tzdb", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "xfun", "yaml"))
install.packages("fs")
library(quickpsy)
?quickpsy
library(ez)
?ezANOVA
install.packages('ez')
install.packages("ez")
?aov
library(lmer)
library(lme4)
?lmer
(1100 - 200)*0.2
(5500 - 200)*0.2
(550 - 200)*0.2
(550*0.2
)
(1000*0.2)
500+400+200+100+200+300+400+500+600+700
code = 212.50
key = 373.33
4*code + 2*key
212.5/1500
codeprz = 212.5/1500
keyprz = key/1500
rut = 1719.15
rut*keyprz
rut*keyprz + rut*2*codeprz
4*212.50
4*212.50 + 3*373.33
all=4*212.50 + 3*373.33
212.5/all
onecode = 212.5/all
onekey = 373.33/all
1719.15*onecode
1719.15*onecode*2
1719.15*onecode*2 + 1719.15*onekey
1719.15*onecode*2 + 1719.15*onekey*2
0.3635321*1719.15
onecode*2 + onekey
p <- 1 - pf(3.88, 1, 17)
F <- qf(p=.12, df1=1, df2=17, lower.tail=FALSE)
vp         <- c('S01', 'S02', 'S03', 'S04')
contrast   <- seq(0.2, 0.4, by = 0.05)
luminance  <- c(10, 50, 70, 170)
data.frame(vp = rep(vp, each = 20),
contrast = rep(rep(contrast, each = 4), times = 4),
luminance = rep(luminance, times = 20))
setwd('C:\Users\LocalAdmin\Downloads\BCI')
fileListBehavioral <- c("AL1_BCIcar.mat", "AW7_BCIcar.mat", "SD1_BCIcar.mat",
"JG1_BCIcar.mat", "NH1_BCIcar.mat", "SB1_BCIcar.mat")
fileListEEG        <- str_replace(fileListBehavioral, 'car', 'car_EEG')
fileListEEG        <- setdiff(fileListEEG, c("SD1_BCIcar_EEG.mat","JG1_BCIcar_EEG.mat")) # exclude SD1, JG1
library(tidyverse)
library(lubridate) # for time / date data type; package is part of tidyverse
library(R.matlab)  # for reading Matlab's *.mat-files into R; you might need to install that package
fileListBehavioral <- c("AL1_BCIcar.mat", "AW7_BCIcar.mat", "SD1_BCIcar.mat",
"JG1_BCIcar.mat", "NH1_BCIcar.mat", "SB1_BCIcar.mat")
fileListEEG        <- str_replace(fileListBehavioral, 'car', 'car_EEG')
fileListEEG        <- setdiff(fileListEEG, c("SD1_BCIcar_EEG.mat","JG1_BCIcar_EEG.mat")) # exclude SD1, JG1
fileName = fileListEEG[1]
str_detect(fileName, 'EEG')
?mutate_if
# define function for reading in single subject data
get_rawData <- function(fileName){
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + 1
outmat %>%
as_tibble() %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1])) %>%
select(vp, trial, speed, ttc, obstacle, outcome, experiment, date)
}
allVpBeh <- map_df(fileListBehavioral, get_rawData)
setwd('C:/Users/LocalAdmin/Documents/Git/BCI_neurofeedback/raw')
allVpBeh <- map_df(fileListBehavioral, get_rawData)
?as_tibble
?make.names
tmp             <- readMat(fileName)$BCIcar
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + 0.45
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat
outmat
outmat
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble()
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble()
exists(outmat$V5)
outmat
outmat <- outmat %>%
as_tibble()
outmat$V5
outmat$V5[1]
exists(outmat$V5)
exists(outmat,V5)
?exists
exists(V5, outmat)
exists("V5, outmat)
exists("V5", outmat)
siwtch(exists("V5", outmat),
switch(exists("V5", outmat),
TRUE = outmat$V5,
switch(exists("V5", outmat),
TRUE = outmat$V5,
FASLE = NA)
switch(exists("V5", outmat),
TRUE = outmat$V5,
FALSE = NA)
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", outmat) ~ outmat$V5,
TRUE = NA))
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", outmat) ~ outmat$V5,
TRUE                 ~ NA))
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", outmat) ~ V5,
TRUE                 ~ NA))
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", .) ~ V5,
TRUE                 ~ NA))
outmat
outmat$r1
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]))
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]))
# define function for reading in single subject data
get_rawData <- function(fileName){
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1])) %>%
#r1 = case_when(
#   exists("V5", .) ~ V5,
#  TRUE                 ~ NA)) %>%
select(vp, trial, speed, ttc, obstacle, outcome, experiment, date)
}
get_rawData <- function(fileName){
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1])) %>%
#r1 = case_when(
#   exists("V5", .) ~ V5,
#  TRUE                 ~ NA)) %>%
select(vp, trial, speed, ttc, obstacle, outcome, experiment, date)
}
