collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat
outmat
outmat
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble()
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble()
exists(outmat$V5)
outmat
outmat <- outmat %>%
as_tibble()
outmat$V5
outmat$V5[1]
exists(outmat$V5)
exists(outmat,V5)
?exists
exists(V5, outmat)
exists("V5, outmat)
exists("V5", outmat)
siwtch(exists("V5", outmat),
switch(exists("V5", outmat),
TRUE = outmat$V5,
switch(exists("V5", outmat),
TRUE = outmat$V5,
FASLE = NA)
switch(exists("V5", outmat),
TRUE = outmat$V5,
FALSE = NA)
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", outmat) ~ outmat$V5,
TRUE = NA))
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", outmat) ~ outmat$V5,
TRUE                 ~ NA))
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", outmat) ~ V5,
TRUE                 ~ NA))
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", .) ~ V5,
TRUE                 ~ NA))
outmat
outmat$r1
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]))
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]))
# define function for reading in single subject data
get_rawData <- function(fileName){
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1])) %>%
#r1 = case_when(
#   exists("V5", .) ~ V5,
#  TRUE                 ~ NA)) %>%
select(vp, trial, speed, ttc, obstacle, outcome, experiment, date)
}
get_rawData <- function(fileName){
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1])) %>%
#r1 = case_when(
#   exists("V5", .) ~ V5,
#  TRUE                 ~ NA)) %>%
select(vp, trial, speed, ttc, obstacle, outcome, experiment, date)
}
setwd('C:/Users/LocalAdmin/Documents/Git/BCI_neurofeedback/raw')
library(tidyverse)
library(lubridate) # for time / date data type; package is part of tidyverse
library(R.matlab)  # for reading Matlab's *.mat-files into R; you might need to install that package
fileListBehavioral <- c("AL1_BCIcar.mat", "AW7_BCIcar.mat", "SD1_BCIcar.mat",
"JG1_BCIcar.mat", "NH1_BCIcar.mat", "SB1_BCIcar.mat")
fileListEEG        <- str_replace(fileListBehavioral, 'car', 'car_EEG')
fileListEEG        <- setdiff(fileListEEG, c("SD1_BCIcar_EEG.mat","JG1_BCIcar_EEG.mat")) # exclude subject SD1
# define function for reading in single subject data
get_rawData <- function(fileName){
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1])) %>%
#r1 = case_when(
#   exists("V5", .) ~ V5,
#  TRUE                 ~ NA)) %>%
select(vp, trial, speed, ttc, obstacle, outcome, experiment, date)
}
# define function for reading in single subject data
get_rawData <- function(fileName){
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", .) ~ V5,
TRUE                 ~ NA)) %>%
select(vp, trial, speed, ttc, obstacle, outcome, experiment, date)
}
get_rawData(fileListBehavioral[1])
# define function for reading in single subject data
get_rawData <- function(fileName){
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", .) ~ .$V5,
TRUE                 ~ NA)) %>%
select(vp, trial, speed, ttc, obstacle, outcome, experiment, date)
}
get_rawData(fileListBehavioral[1])
fileName = fileListBehavioral[1]
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
plusBugCorr
if(str_detect(fileName, 'EEG')){
height_mm       <- 310 # Monitor height in mm, ViewPixx
collisionDist   <- 720 # pixels between obstacle and car at trial start
plusBugCorr     <- 0.45
} else {
height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
collisionDist   <- 468 # pixels between obstacle and car at trial start
plusBugCorr     <- 1
}
tmp             <- readMat(fileName)$BCIcar
#    height_mm       <- 165 # Monitor height in mm, Dell Latitude 6320
#    collisionDist   <- 468 # pixels between obstacle and car at trial start
yResolution     <- tmp[["resolution", 1, 1]][2]
hz              <- tmp[["hz", 1, 1]][1]
outmat          <- tmp[["outmat", 1, 1]]
bugCorrIndex    <- which(diff(outmat[, 2]) == 0 & diff(outmat[, 4]) == -1) +1
outmat[bugCorrIndex, 2] <- outmat[bugCorrIndex, 2] + plusBugCorr
outmat %>%
as_tibble() %>%
#as_tibble(.name_repair = names(make.names) %>%
mutate(vp = as_factor(tmp[["vp", 1, 1]]),
trial = V1,
speed   = round((V2 * hz) * (height_mm / yResolution)), # mm per second
ttc     = round(collisionDist / (V2 * hz) * 1000), # time to collide, in milliseconds
obstacle = as_factor(V3),
obstacle = fct_recode(obstacle,
left  = "-1",
right = "1"),
outcome = as_factor(V4),
outcome = fct_recode(outcome,
pass  = "1",
fail  = "0"),
experiment = tmp[["experiment", 1, 1]][1],
date    = as_datetime(tmp[["date", 1, 1]][1]),
r1 = case_when(
exists("V5", .) ~ .$V5,
TRUE                 ~ NA))
oo=outmat %>%
as_tibble()
oo
oo%>%exist("V5",.)
oo%>%exists("V5",.)
?case_when
oo%>%!exists("V5",.)
oo%>%~exists("V5",.)
oo %>% !exists("V5",.)
oo %>% ~exists("V5",.)
oo %>% exists("V5",.)
oo %>% !(exists("V5",.))
?ifelse
